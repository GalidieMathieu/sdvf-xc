# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from SPOTAPI.models.base_model_ import Model
from SPOTAPI.models.diet_user import DietUser
from SPOTAPI.models.ingredient_user import IngredientUser
from SPOTAPI import util

from SPOTAPI.models.diet_user import DietUser  # noqa: E501
from SPOTAPI.models.ingredient_user import IngredientUser  # noqa: E501

class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, surname=None, email=None, password=None, disliked_ingredient=None, diets=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param id: The id of this User.  # noqa: E501
        :type id: int
        :param surname: The surname of this User.  # noqa: E501
        :type surname: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param disliked_ingredient: The disliked_ingredient of this User.  # noqa: E501
        :type disliked_ingredient: List[IngredientUser]
        :param diets: The diets of this User.  # noqa: E501
        :type diets: List[DietUser]
        """
        self.openapi_types = {
            'id': int,
            'surname': str,
            'email': str,
            'password': str,
            'disliked_ingredient': List[IngredientUser],
            'diets': List[DietUser]
        }

        self.attribute_map = {
            'id': 'id',
            'surname': 'Surname',
            'email': 'email',
            'password': 'password',
            'disliked_ingredient': 'DislikedIngredient',
            'diets': 'diets'
        }

        self._id = id
        self._surname = surname
        self._email = email
        self._password = password
        self._disliked_ingredient = disliked_ingredient
        self._diets = diets

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def surname(self):
        """Gets the surname of this User.


        :return: The surname of this User.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this User.


        :param surname: The surname of this User.
        :type surname: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")  # noqa: E501

        self._surname = surname

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def password(self):
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def disliked_ingredient(self):
        """Gets the disliked_ingredient of this User.


        :return: The disliked_ingredient of this User.
        :rtype: List[IngredientUser]
        """
        return self._disliked_ingredient

    @disliked_ingredient.setter
    def disliked_ingredient(self, disliked_ingredient):
        """Sets the disliked_ingredient of this User.


        :param disliked_ingredient: The disliked_ingredient of this User.
        :type disliked_ingredient: List[IngredientUser]
        """

        self._disliked_ingredient = disliked_ingredient

    @property
    def diets(self):
        """Gets the diets of this User.


        :return: The diets of this User.
        :rtype: List[DietUser]
        """
        return self._diets

    @diets.setter
    def diets(self, diets):
        """Sets the diets of this User.


        :param diets: The diets of this User.
        :type diets: List[DietUser]
        """

        self._diets = diets
