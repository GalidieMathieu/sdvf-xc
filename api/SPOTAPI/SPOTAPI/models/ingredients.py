# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from SPOTAPI.models.base_model_ import Model
from SPOTAPI import util


class Ingredients(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, unit=None, ingredient_type=None):  # noqa: E501
        """Ingredients - a model defined in OpenAPI

        :param id: The id of this Ingredients.  # noqa: E501
        :type id: int
        :param name: The name of this Ingredients.  # noqa: E501
        :type name: str
        :param unit: The unit of this Ingredients.  # noqa: E501
        :type unit: str
        :param ingredient_type: The ingredient_type of this Ingredients.  # noqa: E501
        :type ingredient_type: str
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'unit': str,
            'ingredient_type': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'unit': 'unit',
            'ingredient_type': 'ingredientType'
        }

        self._id = id
        self._name = name
        self._unit = unit
        self._ingredient_type = ingredient_type

    @classmethod
    def from_dict(cls, dikt) -> 'Ingredients':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ingredients of this Ingredients.  # noqa: E501
        :rtype: Ingredients
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Ingredients.


        :return: The id of this Ingredients.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Ingredients.


        :param id: The id of this Ingredients.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Ingredients.


        :return: The name of this Ingredients.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Ingredients.


        :param name: The name of this Ingredients.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this Ingredients.


        :return: The unit of this Ingredients.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Ingredients.


        :param unit: The unit of this Ingredients.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit

    @property
    def ingredient_type(self):
        """Gets the ingredient_type of this Ingredients.


        :return: The ingredient_type of this Ingredients.
        :rtype: str
        """
        return self._ingredient_type

    @ingredient_type.setter
    def ingredient_type(self, ingredient_type):
        """Sets the ingredient_type of this Ingredients.


        :param ingredient_type: The ingredient_type of this Ingredients.
        :type ingredient_type: str
        """
        if ingredient_type is None:
            raise ValueError("Invalid value for `ingredient_type`, must not be `None`")  # noqa: E501

        self._ingredient_type = ingredient_type
