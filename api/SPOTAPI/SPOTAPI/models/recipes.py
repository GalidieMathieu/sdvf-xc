# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from SPOTAPI.models.base_model_ import Model
from SPOTAPI.models.diet import Diet
from SPOTAPI.models.ingredient_in_recepies import IngredientInRecepies
from SPOTAPI import util

from SPOTAPI.models.diet import Diet  # noqa: E501
from SPOTAPI.models.ingredient_in_recepies import IngredientInRecepies  # noqa: E501

class Recipes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, time=None, nb_person=None, directions=None, diets=None, ingredients=None):  # noqa: E501
        """Recipes - a model defined in OpenAPI

        :param id: The id of this Recipes.  # noqa: E501
        :type id: int
        :param name: The name of this Recipes.  # noqa: E501
        :type name: str
        :param time: The time of this Recipes.  # noqa: E501
        :type time: int
        :param nb_person: The nb_person of this Recipes.  # noqa: E501
        :type nb_person: int
        :param directions: The directions of this Recipes.  # noqa: E501
        :type directions: str
        :param diets: The diets of this Recipes.  # noqa: E501
        :type diets: List[Diet]
        :param ingredients: The ingredients of this Recipes.  # noqa: E501
        :type ingredients: List[IngredientInRecepies]
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'time': int,
            'nb_person': int,
            'directions': str,
            'diets': List[Diet],
            'ingredients': List[IngredientInRecepies]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'time': 'time',
            'nb_person': 'nbPerson',
            'directions': 'directions',
            'diets': 'diets',
            'ingredients': 'ingredients'
        }

        self._id = id
        self._name = name
        self._time = time
        self._nb_person = nb_person
        self._directions = directions
        self._diets = diets
        self._ingredients = ingredients

    @classmethod
    def from_dict(cls, dikt) -> 'Recipes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The recipes of this Recipes.  # noqa: E501
        :rtype: Recipes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Recipes.


        :return: The id of this Recipes.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Recipes.


        :param id: The id of this Recipes.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Recipes.


        :return: The name of this Recipes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Recipes.


        :param name: The name of this Recipes.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def time(self):
        """Gets the time of this Recipes.


        :return: The time of this Recipes.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Recipes.


        :param time: The time of this Recipes.
        :type time: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def nb_person(self):
        """Gets the nb_person of this Recipes.


        :return: The nb_person of this Recipes.
        :rtype: int
        """
        return self._nb_person

    @nb_person.setter
    def nb_person(self, nb_person):
        """Sets the nb_person of this Recipes.


        :param nb_person: The nb_person of this Recipes.
        :type nb_person: int
        """
        if nb_person is None:
            raise ValueError("Invalid value for `nb_person`, must not be `None`")  # noqa: E501

        self._nb_person = nb_person

    @property
    def directions(self):
        """Gets the directions of this Recipes.


        :return: The directions of this Recipes.
        :rtype: str
        """
        return self._directions

    @directions.setter
    def directions(self, directions):
        """Sets the directions of this Recipes.


        :param directions: The directions of this Recipes.
        :type directions: str
        """
        if directions is None:
            raise ValueError("Invalid value for `directions`, must not be `None`")  # noqa: E501

        self._directions = directions

    @property
    def diets(self):
        """Gets the diets of this Recipes.


        :return: The diets of this Recipes.
        :rtype: List[Diet]
        """
        return self._diets

    @diets.setter
    def diets(self, diets):
        """Sets the diets of this Recipes.


        :param diets: The diets of this Recipes.
        :type diets: List[Diet]
        """

        self._diets = diets

    @property
    def ingredients(self):
        """Gets the ingredients of this Recipes.


        :return: The ingredients of this Recipes.
        :rtype: List[IngredientInRecepies]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this Recipes.


        :param ingredients: The ingredients of this Recipes.
        :type ingredients: List[IngredientInRecepies]
        """

        self._ingredients = ingredients
