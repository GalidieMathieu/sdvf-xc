# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from SPOTAPI.models.base_model_ import Model
from SPOTAPI.models.ingredients import Ingredients
from SPOTAPI import util

from SPOTAPI.models.ingredients import Ingredients  # noqa: E501

class IngredientInRecepies(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quantite=None, optionnel=None, ingredient=None):  # noqa: E501
        """IngredientInRecepies - a model defined in OpenAPI

        :param quantite: The quantite of this IngredientInRecepies.  # noqa: E501
        :type quantite: str
        :param optionnel: The optionnel of this IngredientInRecepies.  # noqa: E501
        :type optionnel: bool
        :param ingredient: The ingredient of this IngredientInRecepies.  # noqa: E501
        :type ingredient: Ingredients
        """
        self.openapi_types = {
            'quantite': str,
            'optionnel': bool,
            'ingredient': Ingredients
        }

        self.attribute_map = {
            'quantite': 'quantite',
            'optionnel': 'optionnel',
            'ingredient': 'ingredient'
        }

        self._quantite = quantite
        self._optionnel = optionnel
        self._ingredient = ingredient

    @classmethod
    def from_dict(cls, dikt) -> 'IngredientInRecepies':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ingredientInRecepies of this IngredientInRecepies.  # noqa: E501
        :rtype: IngredientInRecepies
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quantite(self):
        """Gets the quantite of this IngredientInRecepies.


        :return: The quantite of this IngredientInRecepies.
        :rtype: str
        """
        return self._quantite

    @quantite.setter
    def quantite(self, quantite):
        """Sets the quantite of this IngredientInRecepies.


        :param quantite: The quantite of this IngredientInRecepies.
        :type quantite: str
        """
        if quantite is None:
            raise ValueError("Invalid value for `quantite`, must not be `None`")  # noqa: E501

        self._quantite = quantite

    @property
    def optionnel(self):
        """Gets the optionnel of this IngredientInRecepies.


        :return: The optionnel of this IngredientInRecepies.
        :rtype: bool
        """
        return self._optionnel

    @optionnel.setter
    def optionnel(self, optionnel):
        """Sets the optionnel of this IngredientInRecepies.


        :param optionnel: The optionnel of this IngredientInRecepies.
        :type optionnel: bool
        """
        if optionnel is None:
            raise ValueError("Invalid value for `optionnel`, must not be `None`")  # noqa: E501

        self._optionnel = optionnel

    @property
    def ingredient(self):
        """Gets the ingredient of this IngredientInRecepies.


        :return: The ingredient of this IngredientInRecepies.
        :rtype: Ingredients
        """
        return self._ingredient

    @ingredient.setter
    def ingredient(self, ingredient):
        """Sets the ingredient of this IngredientInRecepies.


        :param ingredient: The ingredient of this IngredientInRecepies.
        :type ingredient: Ingredients
        """

        self._ingredient = ingredient
