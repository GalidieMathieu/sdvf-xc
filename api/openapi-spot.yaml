# OpenAPI version identifier - required for OpenAPI 3.0 domains
openapi: 3.0.0

#######################
# Optional info section
#######################
info:
  title: SPOT API
  description: API of Appetee Project
  version: '1.0.0'

servers:
  - url: /
    description: Optional server description, e.g. Internal staging server for testing

components:

  ####################
  # Security
  ####################
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: API-KEY  # name of the header, query parameter or cookie

  ####################
  # Common data models
  ####################
  schemas:
    error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
########## General ##########
# Diets
    diet:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
      example:
        id: 1
        name : vegetariens

# Ingredients
    ingredients:
      type: object
      required:
        - name
        - unit
        - ingredientType
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        unit:
          type: string
        ingredientType:
          type: string
      example:
        id: 1
        name: amande
        unit: g
        ingredientType: 'fruit Ã  coque'

# For Recipes ##########
    ingredientInRecepies:
      type: object
      required:
        - quantite
        - optionnel
      properties:
        quantite:
          type: string
        optionnel:
          type: boolean
        ingredient:
          $ref: '#/components/schemas/ingredients'
      example:
        quantite: 50
        optionnel: false

# For User ##########
    ingredientUser:
      type: object
      required:
        - allergie
      properties:
        allergie:
          type: boolean
        ingredient:
          $ref: '#/components/schemas/ingredients'
      example:
        allergie: false

    DietUser:
      type: object
      required:
        - allergie
      properties:
        allergie:
          type: boolean
        ingredient:
          $ref: '#/components/schemas/diet'
      example:
        allergie: false

########## Main Schemas ##########
#Recettes
    recipes:
      type: object
      required:
        - name
        - time
        - nbPerson
        - directions
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        time:
          type: integer
          format: int32
        nbPerson:
          type: integer
          format: int32
        directions:
          type: string
        diets:
          type: array
          items:
            $ref: '#/components/schemas/diet'
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/ingredientInRecepies'
        example:
          id: 1
          name: salade de fruit
          time: 30
          nbPerson: 5
          directions: "{'step1' : 'melanger les fruits'}"

# User
    User:
      type: object
      required:
        - Id
        - Surname
      properties:
        id:
          type: integer
          format: int32
        Surname:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          #writeOnly: true
        DislikedIngredient:
          type: array
          items:
            $ref: '#/components/schemas/ingredientUser'
        diets:
          type: array
          items:
            $ref: '#/components/schemas/DietUser'
        example:
          id: 1
          name: Mathieu
          
  ####################
  # Common parameters
  ####################
  parameters:
    ingredientsIDParam:
      name: ingredientsID
      in: path
      required: true
      schema:
        type: integer
        minimum: 0
      description: The Id of a ingredient

    recipeIDParam:
      name: recipeID
      in: path
      required: true
      schema:
        type: integer
        minimum: 0
      description: The Id of a recipe

    dietIDParam:
      name: dietID
      in: path
      required: true
      schema:
        type: integer
        minimum: 0
      description: The Id of a diet

    UserIDParam:
      name: UserID
      in: path
      required: true
      schema:
        type: integer
        minimum: 0
      description: The Id of a user

    offsetParam:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
      description: The number of items to skip before returning the results

    limitParam:
      in: query
      name: limit
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
      description: The number of items to return

  #######################
  # Common request bodies
  #######################


  ####################
  # Common responses
  ####################
  responses:
    rateLimitHeader:
      description: Default Header for Rate Limit
      headers:
        X-RateLimit-Limit:
          $ref: '#/components/headers/X-RateLimit-Limit'
        X-RateLimit-Remaining:
          $ref: '#/components/headers/X-RateLimit-Remaining'

    GeneralError:
      description: An error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'

########## General ##########
# Diets 
    diet:
      description: A diet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/diet'

    dietList:
      description: A list of Diets
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/diet'
# Ingredients 
    ingredients:
      description: A ingredients
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ingredients'

    ingredientsList:
      description: A list of ingredients
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ingredients'

########## Main Schemas ##########
# Recettes
    recipes:
      description: A recipes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/recipes'

    recipesList:
      description: A list of recipes
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/recipes'
              
# User
    User:
      description: A User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    UserList:
      description: A list of User
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'

  #########################
  # Common headers
  # (except request headers - they are defined as parameters)
  #########################
  headers:
    X-RateLimit-Limit:
      description: Request limit per hour
      schema:
        type: integer
      example: 100
    X-RateLimit-Remaining:
      description: Remaining requests for the hour
      schema:
        type: integer
      example: 94

#######################
# Security
#######################
security:
  - ApiKeyAuth: []     # use the same name as under securitySchemes

#######################
# Common path items
#######################
paths:
  /ingredients:
    get:
      summary: Retrieve a collection of ingredients objects
      description: This operation supports pagination
      tags:
        - ingredients
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: A list of ingredients
        default:
          $ref: '#/components/responses/ingredientsList'
    post:
      summary: Create ingredients
      tags:
        - ingredients
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ingredients'
      responses:
        '201':
          description: Created

  /ingredients/{ingredientsID}/:
    get:
      summary: Retrieve a ingredient object
      description: Test
      tags:
        - ingredients
      parameters:
        - $ref: '#/components/parameters/ingredientsIDParam'
      responses:
        '200':
          description: A specific ingredients
        default:
          $ref: '#/components/responses/ingredients'
    patch:
      summary: Update ingredients object
      description: Test
      tags:
        - ingredients
      parameters:
        - $ref: '#/components/parameters/ingredientsIDParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ingredients'
      responses:
        '200':
          description: Success
        '202':
          description: Accepted
        '204':
          description: Request fulfilled, nothing follows
        '403':
          description: Forbidden
        '404':
          description: Not Found
        default:
          $ref: '#/components/responses/GeneralError'
    delete:
      summary: Delete ingredients object
      description: Test
      tags:
        - ingredients
      parameters:
        - $ref: '#/components/parameters/ingredientsIDParam'
      responses:
        '200':
          description: Success
        '202':
          description: Accepted
        '204':
          description: Request fulfilled, nothing follows
        '403':
          description: Forbidden
        '404':
          description: Not Found
        default:
          $ref: '#/components/responses/GeneralError'

  /recipe:
    get:
      summary: Retrieve a collection of recipe objects
      description: This operation supports pagination
      tags:
        - recipe
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: A list of recipe
        default:
          $ref: '#/components/responses/recipesList'
    post:
      summary: Create recipes
      tags:
        - recipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recipes'
      responses:
        '201':
          description: Created